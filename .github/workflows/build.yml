name: Build

on:
  push:
  pull_request:

jobs:
  # =========================================================
  # Build Job
  # =========================================================
  build:
    name: CMake - ${{ matrix.platform[0] }} - ${{ matrix.platform[2] }} - ${{ matrix.platform[3] }}
    runs-on: ${{ matrix.platform[1] }}
    strategy:
      matrix:
        platform:
          - [windows, windows-latest, msvc, Debug]
          - [windows, windows-latest, msvc, Release]
          - [windows, windows-latest, gcc, Debug]
          - [windows, windows-latest, gcc, Release]
          - [windows, windows-latest, clang, Debug]
          - [windows, windows-latest, clang, Release]
          - [linux, ubuntu-latest, gcc, Debug]
          - [linux, ubuntu-latest, gcc, Release]
          - [linux, ubuntu-latest, clang, Debug]
          - [linux, ubuntu-latest, clang, Release]
    env:
      OPERATING_SYSTEM: ${{ matrix.platform[0] }}
      DISTRIBUTION: ${{ matrix.platform[1] }}
      COMPILER: ${{ matrix.platform[2] }}
      BUILD_TYPE: ${{ matrix.platform[3] }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Clang
        if: env.COMPILER == 'clang'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17.0"

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Setup Conan Packages
        shell: bash
        run: |
          conan profile detect --force
          conan install . -pr profiles/$OPERATING_SYSTEM/$COMPILER --build=missing -s build_type=$BUILD_TYPE

      - name: Install CMake
        uses: lukka/get-cmake@latest
        
      - name: Configure
        shell: bash
        run: |
          if [ "${{ env.COMPILER }}" == "msvc" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 17 2022" -DCMAKE_TOOLCHAIN_FILE=build/generators/conan_toolchain.cmake
          elif [ "${{ env.COMPILER }}" == "clang" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_TOOLCHAIN_FILE=build/$BUILD_TYPE/generators/conan_toolchain.cmake
          elif [ "${{ env.COMPILER }}" == "gcc" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_TOOLCHAIN_FILE=build/$BUILD_TYPE/generators/conan_toolchain.cmake
          fi

      - name: Build
        run: cmake --build build --parallel --config ${{ env.BUILD_TYPE }}

      - name: Test
        run: ctest --test-dir build --build-config ${{ env.BUILD_TYPE }} --output-on-failure

      - name: Regression
        shell: bash
        run: |
          echo "Starting regression tests for $OPERATING_SYSTEM $BUILD_TYPE"
          failures=()

          for FORMAT in "ASCII" "ABBREV_ASCII" "BINARY" "FLATTENED_BINARY" "JSON"; do
              ./build/bin/$BUILD_TYPE/converter_components database/messages_public.json regression/BESTUTMBIN.GPS $FORMAT > /dev/null

              if ! cmp -s regression/BESTUTMBIN.GPS.$FORMAT regression/targets/BESTUTMBIN.GPS.$FORMAT; then
                  failures+=("OEM-$FORMAT")
              fi
              
              if ! cmp -s regression/BESTUTMBIN.GPS.$FORMAT.UNKNOWN regression/targets/BESTUTMBIN.GPS.$FORMAT.UNKNOWN; then
                  failures+=("OEM-$FORMAT.UNKNOWN")
              fi
          done
          
          if [ ${#failures[@]} -gt 0 ]; then
              echo "One or more regression tests failed! ${failures[@]}"
              echo "See the README if you don't know how to fix this."
              exit 1
          fi
          
          echo "Regression tests for $OPERATING_SYSTEM $BUILD_TYPE done!"

      - name: Upload Artifacts
        if: failure()
        uses: actions/upload-artifact@v4.3.0
        with:
          name: ${{ env.OPERATING_SYSTEM }}-${{ env.COMPILER }}-${{ env.BUILD_TYPE }}-artifacts
          path: |
             regression/
  
  # =========================================================
  # Clang Format Job
  # =========================================================
  clang-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check code formatting
      run: find src examples \( -name '*.cpp' -o -name '*.hpp' \) -exec clang-format -Werror --style=file -n {} + || (echo "Clang-format failed! See the README if you don't know how to fix this." && exit 1)

  # =========================================================
  # Editor Config Job
  # =========================================================
  editorconfig:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install editorconfig-checker
      uses: editorconfig-checker/action-editorconfig-checker@main

    - name: Check CMakeLists.txt formatting
      run: find . \( -name 'CMakeLists.txt' \) -exec editorconfig-checker {} \+ || { echo "EditorConfig check failed! See the README if you don't know how to fix this."; exit 1; }

    - name: Check C++ formatting
      run: find src examples \( -name '*.cpp' -o -name '*.hpp' \) -exec editorconfig-checker {} \+ || { echo "EditorConfig check failed! See the README if you don't know how to fix this."; exit 1; }

  # =========================================================
  # Clang Tidy Job
  # =========================================================
  clang-tidy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17.0"

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Setup Conan Packages
        shell: bash
        run: |
          conan profile detect --force
          conan install . -pr profiles/linux/Debug/clang --build=missing -s build_type=Debug

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Static code analysis
        run: |
          cmake -S . -B build -DCMAKE_CXX_CLANG_TIDY=clang-tidy -DCMAKE_BUILD_TYPE=Debug -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_TOOLCHAIN_FILE=build/Debug/generators/conan_toolchain.cmake
          cmake --build build --parallel --config Debug

  # =========================================================
  # Code Coverage Job
  # =========================================================
  code-coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Setup Conan Packages
      shell: bash
      run: |
        conan profile detect --force
        conan install . -pr profiles/linux/Debug/gcc --build=missing -s build_type=Debug

    - name: Install CMake
      uses: lukka/get-cmake@latest

    - name: Install GCC Coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y gcovr

    - name: Configure
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -G Ninja -DCOVERAGE=ON -DCMAKE_TOOLCHAIN_FILE=build/Debug/generators/conan_toolchain.cmake

    - name: Build
      run: cmake --build build --parallel --config debug

    - name: Run Tests
      run: cd build && ctest && cd ..

    - name: Generate HTML code coverage reports
      run: | 
        mkdir build/code-coverage
        gcovr -r ./src/ ./build/ --exclude='.*/test/.*' --exclude='.*/dynamic_library/.*' --exclude='.*/version.h' --html --html-details -o ./build/code-coverage/index.html
    
    - name: Coverage visualization in pipeline summary
      run: gcovr -r ./src/ ./build/ --exclude='.*/test/.*' --exclude='.*/dynamic_library/.*' --exclude='.*/version.h' --exclude-unreachable-branches --print-summary -o ./build/coverage.xml

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.3.0
      with:
        name: code-coverage
        path: |
          build/code-coverage
          build/coverage.xml
  
  # =========================================================
  # Documentation Job
  # =========================================================
  documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen=1.9.1-2ubuntu2
          pip3 install 'exhale==0.3.6'
          pip3 install 'sphinx==5.0.0'
          pip3 install 'sphinx_rtd_theme==1.2.2'
          pip3 install 'json2html==1.3.0'

      - name: Generate documentation for EDIE
        run: |
          sphinx-build src/decoders/common/doc doc/decoders/common/doc/html
          sphinx-build src/decoders/novatel/doc doc/decoders/novatel/doc/html
          sphinx-build src/hw_interface/stream_interface/doc doc/hw_interface/stream_interface/doc/html
          python3 scripts/database_to_html.py database/messages_public.json

      - name: Archive documentation artifacts
        uses: actions/upload-artifact@v4.3.0
        with:
          name: documentation
          path: |
            doc
            database/messages_public.html

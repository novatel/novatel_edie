[project]
name = "novatel_edie"
description = "SDK for interfacing with and decoding data from NovAtel OEM7 receivers"
version = "4.0.0"
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "importlib_resources",
    "typer >=0.15"
]

[build-system]
requires = [
    "scikit-build-core >=0.4.3",
    "nanobind >=2.0.0",
    "conan >=2.4.0",
    "typer >=0.15"
]
build-backend = "scikit_build_core.build"

# For development, it is more efficient to install the build dependencies
# in your environment once and use the following command that avoid
# a costly creation of a new virtual environment at every compilation:
# =====================================================================
#  $ pip install --upgrade nanobind scikit-build-core[pyproject]
#  $ pip install --no-build-isolation -ve .
# =====================================================================
# You may optionally add -Ceditable.rebuild=true to auto-rebuild when
# the package is imported. Otherwise, you need to re-run the above
# after editing C++ files.
# For development without scikit-build-core, you can use the following:
# =====================================================================
#  $ pip install --upgrade nanobind
#  $ cmake .. -DBUILD_PYTHON=1
# =====================================================================

[tool.scikit-build]
cmake.minimum-version = "3.24"
cmake.targets = ["python_bindings", "bindings_stub", "dynamic_stubs"]
install.components = ["python"]
wheel.license-files = ["LICENSE"]
build-dir = "out/build/{wheel_tag}"
# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

[tool.scikit-build.cmake.define]
BUILD_PYTHON = true
BUILD_SHARED_LIBS = false

[tool.cibuildwheel]
build = "*"
# Disable building of PyPy wheels on all platforms
skip = "pp*"
test-requires = "pytest"
test-command = "pytest {project}/python/test --color=yes -v"
build-verbosity = 1
archs = "auto64"

# Needed for full C++17 support
[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = "10.15"


[tool.bumpversion]
current_version = "4.0.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []
[project.scripts]
novatel_edie = "novatel_edie.cli:app"

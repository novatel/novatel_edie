
.. _program_listing_file_src_decoders_novatel_api_encoder.hpp:

Program Listing for File encoder.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_decoders_novatel_api_encoder.hpp>` (``src/decoders/novatel/api/encoder.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // ===============================================================================
   // |                                                                             |
   // |  COPYRIGHT NovAtel Inc, 2022. All rights reserved.                          |
   // |                                                                             |
   // |  Permission is hereby granted, free of charge, to any person obtaining a    |
   // |  copy of this software and associated documentation files (the "Software"), |
   // |  to deal in the Software without restriction, including without limitation  |
   // |  the rights to use, copy, modify, merge, publish, distribute, sublicense,   |
   // |  and/or sell copies of the Software, and to permit persons to whom the      |
   // |  Software is furnished to do so, subject to the following conditions:       |
   // |                                                                             |
   // |  The above copyright notice and this permission notice shall be included    |
   // |  in all copies or substantial portions of the Software.                     |
   // |                                                                             |
   // |  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR |
   // |  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   |
   // |  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    |
   // |  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER |
   // |  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    |
   // |  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        |
   // |  DEALINGS IN THE SOFTWARE.                                                  |
   // |                                                                             |
   // ===============================================================================
   // ! \file encoder.hpp
   // ===============================================================================
   
   #ifndef NOVATEL_ENCODER_HPP
   #define NOVATEL_ENCODER_HPP
   
   #include <nlohmann/json.hpp>
   
   #include "decoders/common/api/common.hpp"
   #include "decoders/common/api/encoder.hpp"
   #include "decoders/common/api/json_reader.hpp"
   #include "decoders/common/api/message_decoder.hpp"
   #include "decoders/novatel/api/common.hpp"
   
   using nlohmann::json;
   
   namespace novatel::edie::oem {
   
   //============================================================================
   //============================================================================
   class Encoder : public EncoderBase
   {
     private:
       // Enum util functions
       void InitEnumDefinitions() override;
       static void InitFieldMaps();
       [[nodiscard]] std::string JsonHeaderToMsgName(const IntermediateHeader& stInterHeader_) const;
   
     protected:
       [[nodiscard]] char SeparatorAscii() const override { return OEM4_ASCII_FIELD_SEPARATOR; }
       [[nodiscard]] char SeparatorAbbAscii() const override { return OEM4_ABBREV_ASCII_SEPARATOR; }
       [[nodiscard]] uint32_t IndentationLengthAbbAscii() const override { return OEM4_ABBREV_ASCII_INDENTATION_LENGTH; }
   
       // Encode binary
       [[nodiscard]] bool EncodeBinaryHeader(const IntermediateHeader& stInterHeader_, unsigned char** ppcOutBuf_, uint32_t& uiBytesLeft_);
       [[nodiscard]] bool EncodeBinaryShortHeader(const IntermediateHeader& stInterHeader_, unsigned char** ppcOutBuf_, uint32_t& uiBytesLeft_);
       [[nodiscard]] bool FieldToBinary(const FieldContainer& fc_, unsigned char** ppcOutBuf_, uint32_t& uiBytesLeft_) override;
   
       // Encode ascii
       [[nodiscard]] bool EncodeAsciiHeader(const IntermediateHeader& stInterHeader_, char** ppcOutBuf_, uint32_t& uiBytesLeft_) const;
       [[nodiscard]] bool EncodeAsciiShortHeader(const IntermediateHeader& stInterHeader_, char** ppcOutBuf_, uint32_t& uiBytesLeft_) const;
       [[nodiscard]] bool EncodeAbbrevAsciiHeader(const IntermediateHeader& stInterHeader_, char** ppcOutBuf_, uint32_t& uiBytesLeft_,
                                                  bool bIsEmbeddedHeader_ = false) const;
       [[nodiscard]] bool EncodeAbbrevAsciiShortHeader(const IntermediateHeader& stInterHeader_, char** ppcOutBuf_, uint32_t& uiBytesLeft_) const;
   
       // Encode JSON
       [[nodiscard]] bool EncodeJsonHeader(const IntermediateHeader& stInterHeader_, char** ppcOutBuf_, uint32_t& uiBytesLeft_) const;
       [[nodiscard]] bool EncodeJsonShortHeader(const IntermediateHeader& stInterHeader_, char** ppcOutBuf_, uint32_t& uiBytesLeft_) const;
   
     public:
       //----------------------------------------------------------------------------
       //
       //----------------------------------------------------------------------------
       Encoder(JsonReader* pclJsonDb_ = nullptr);
   
       //----------------------------------------------------------------------------
       //
       //
       //----------------------------------------------------------------------------
       [[nodiscard]] STATUS Encode(unsigned char** ppucBuffer_, uint32_t uiBufferSize_, const IntermediateHeader& stHeader_,
                                   const std::vector<FieldContainer>& stMessage_, MessageDataStruct& stMessageData_, const MetaDataStruct& stMetaData_,
                                   ENCODE_FORMAT eFormat_);
   
       //----------------------------------------------------------------------------
       //
       //
       //----------------------------------------------------------------------------
       [[nodiscard]] STATUS EncodeHeader(unsigned char** ppucBuffer_, uint32_t uiBufferSize_, const IntermediateHeader& stHeader_,
                                         MessageDataStruct& stMessageData_, const MetaDataStruct& stMetaData_, ENCODE_FORMAT eFormat_,
                                         bool bIsEmbeddedHeader_ = false);
   
       //----------------------------------------------------------------------------
       //
       //
       //----------------------------------------------------------------------------
       [[nodiscard]] STATUS EncodeBody(unsigned char** ppucBuffer_, uint32_t uiBufferSize_, const std::vector<FieldContainer>& stMessage_,
                                       MessageDataStruct& stMessageData_, const MetaDataStruct& stMetaData_, ENCODE_FORMAT eFormat_);
   };
   
   } // namespace novatel::edie::oem
   
   #endif // NOVATEL_ENCODER_HPP

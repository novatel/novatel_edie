
.. _program_listing_file_src_decoders_novatel_api_commander.hpp:

Program Listing for File commander.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_decoders_novatel_api_commander.hpp>` (``src/decoders/novatel/api/commander.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // ===============================================================================
   // |                                                                             |
   // |  COPYRIGHT NovAtel Inc, 2022. All rights reserved.                          |
   // |                                                                             |
   // |  Permission is hereby granted, free of charge, to any person obtaining a    |
   // |  copy of this software and associated documentation files (the "Software"), |
   // |  to deal in the Software without restriction, including without limitation  |
   // |  the rights to use, copy, modify, merge, publish, distribute, sublicense,   |
   // |  and/or sell copies of the Software, and to permit persons to whom the      |
   // |  Software is furnished to do so, subject to the following conditions:       |
   // |                                                                             |
   // |  The above copyright notice and this permission notice shall be included    |
   // |  in all copies or substantial portions of the Software.                     |
   // |                                                                             |
   // |  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR |
   // |  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   |
   // |  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    |
   // |  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER |
   // |  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    |
   // |  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        |
   // |  DEALINGS IN THE SOFTWARE.                                                  |
   // |                                                                             |
   // ===============================================================================
   // ! \file commander.hpp
   // ===============================================================================
   
   #ifndef NOVATEL_COMMANDER_HPP
   #define NOVATEL_COMMANDER_HPP
   
   #include "decoders/common/api/common.hpp"
   #include "decoders/common/api/json_reader.hpp"
   #include "decoders/novatel/api/common.hpp"
   #include "decoders/novatel/api/encoder.hpp"
   #include "decoders/novatel/api/message_decoder.hpp"
   
   namespace novatel::edie::oem {
   
   //============================================================================
   //============================================================================
   class Commander
   {
     private:
       std::shared_ptr<spdlog::logger> pclMyLogger{Logger::RegisterLogger("novatel_commander")};
       MessageDecoder clMyMessageDecoder;
       Encoder clMyEncoder;
       JsonReader* pclMyMsgDb{nullptr};
   
       EnumDefinition* vMyResponseDefinitions{nullptr};
       EnumDefinition* vMyCommandDefinitions{nullptr};
       EnumDefinition* vMyPortAddressDefinitions{nullptr};
       EnumDefinition* vMyGpsTimeStatusDefinitions{nullptr};
   
       MessageDefinition stMyRespDef;
   
       // Enum util functions
       void InitEnumDefinitions();
       void CreateResponseMsgDefinitions();
   
     public:
       //----------------------------------------------------------------------------
       //
       //----------------------------------------------------------------------------
       Commander(JsonReader* pclJsonDb_ = nullptr);
   
       //----------------------------------------------------------------------------
       //
       //----------------------------------------------------------------------------
       void LoadJsonDb(JsonReader* pclJsonDb_);
   
       //----------------------------------------------------------------------------
       //
       //----------------------------------------------------------------------------
       [[nodiscard]] std::shared_ptr<spdlog::logger> GetLogger() const;
   
       //----------------------------------------------------------------------------
       //
       //----------------------------------------------------------------------------
       void SetLoggerLevel(spdlog::level::level_enum eLevel_) const;
   
       //----------------------------------------------------------------------------
       //----------------------------------------------------------------------------
       static void ShutdownLogger();
   
       //----------------------------------------------------------------------------
       //
       //
       //----------------------------------------------------------------------------
       [[nodiscard]] STATUS Encode(const char* pcAbbrevAsciiCommand_, uint32_t uiAbbrevAsciiCommandLength_, char* pcEncodeBuffer_,
                                   uint32_t& uiEncodeBufferSize_, ENCODE_FORMAT eEncodeFormat_);
   
       //----------------------------------------------------------------------------
       //
       //
       //----------------------------------------------------------------------------
       [[nodiscard]] static STATUS Encode(const JsonReader& clJsonDb_, const MessageDecoder& clMessageDecoder_, Encoder& clEncoder_,
                                          const char* pcAbbrevAsciiCommand_, uint32_t uiAbbrevAsciiCommandLength_, char* pcEncodeBuffer_,
                                          uint32_t& uiEncodeBufferSize_, ENCODE_FORMAT eEncodeFormat_);
   };
   
   } // namespace novatel::edie::oem
   
   #endif // NOVATEL_COMMANDER_HPP

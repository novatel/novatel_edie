
.. _program_listing_file_src_hw_interface_stream_interface_api_multioutputfilestream.hpp:

Program Listing for File multioutputfilestream.hpp
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_hw_interface_stream_interface_api_multioutputfilestream.hpp>` (``src/hw_interface/stream_interface/api/multioutputfilestream.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // ===============================================================================
   // |                                                                             |
   // |  COPYRIGHT NovAtel Inc, 2022. All rights reserved.                          |
   // |                                                                             |
   // |  Permission is hereby granted, free of charge, to any person obtaining a    |
   // |  copy of this software and associated documentation files (the "Software"), |
   // |  to deal in the Software without restriction, including without limitation  |
   // |  the rights to use, copy, modify, merge, publish, distribute, sublicense,   |
   // |  and/or sell copies of the Software, and to permit persons to whom the      |
   // |  Software is furnished to do so, subject to the following conditions:       |
   // |                                                                             |
   // |  The above copyright notice and this permission notice shall be included    |
   // |  in all copies or substantial portions of the Software.                     |
   // |                                                                             |
   // |  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR |
   // |  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   |
   // |  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    |
   // |  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER |
   // |  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    |
   // |  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        |
   // |  DEALINGS IN THE SOFTWARE.                                                  |
   // |                                                                             |
   // ===============================================================================
   // ! \file multioutputfilestream.hpp
   // ===============================================================================
   
   #ifndef MULTI_OUTPUT_FILE_STREAM_HPP
   #define MULTI_OUTPUT_FILE_STREAM_HPP
   
   #include <map>
   #include <string>
   
   #include "decoders/common/api/common.hpp"
   #include "decoders/novatel/api/common.hpp"
   #include "filestream.hpp"
   #include "outputstreaminterface.hpp"
   
   constexpr uint32_t MIN_TIME_SPLIT_SEC = 36;
   
   constexpr uint32_t MIN_FILE_SPLIT_SIZE = 1;
   
   constexpr uint32_t HR_TO_SEC = 3600;
   
   constexpr uint32_t MBYTE_TO_BYTE = 1024 * 1024;
   
   class MultiOutputFileStream : public OutputStreamInterface
   {
     public:
       MultiOutputFileStream() = default;
   
       ~MultiOutputFileStream() override;
   
       void SelectFileStream(const std::u32string& s32FileName_) override;
   
       void ClearWCFileStreamMap();
   
       void ConfigureBaseFileName(const std::u32string& s32FileName_) override;
   
       void SelectWCLogFile(std::string strMsgName_);
   
       void SelectWCSizeFile(uint32_t uiSize_);
   
       void SelectWCTimeFile(novatel::edie::TIME_STATUS eStatus_, uint16_t usWeek_, double dMilliseconds_);
   
       uint32_t WriteData(const char* pcData_, uint32_t uiDataLength_, const std::string& strMsgName_, uint32_t uiSize_,
                          novatel::edie::TIME_STATUS eStatus_, uint16_t usWeek_, double dMilliseconds_);
   
       uint32_t WriteData(const char* pcData_, uint32_t uiDataLength_) override;
   
       void SelectFileStream(const std::string& stFileName) override;
   
       void ConfigureBaseFileName(const std::string& stFileName) override;
   
       void ClearFileStreamMap();
   
       void ConfigureSplitByLog(bool bStatus) override;
   
       void SelectLogFile(const std::string& strMsgName_);
   
       void ConfigureSplitBySize(uint64_t ullFileSplitSize) override;
   
       void SelectSizeFile(uint32_t uiSize_);
   
       void ConfigureSplitByTime(double dFileSplitTime) override;
   
       void SelectTimeFile(novatel::edie::TIME_STATUS eStatus_, uint16_t usWeek_, double dMilliseconds_);
   
       std::map<std::string, FileStream*> GetFileMap() { return mMyFstreamMap; }
   
       std::map<std::u32string, FileStream*> Get32FileMap() { return wmMyFstreamMap; }
   
       void SetExtensionName(const std::string& strExt) { stMyExtensionName = strExt; }
       void SetExtensionName(const std::u32string& strExt) { s32MyExtensionName = strExt; }
   
       friend class MultiOutputFileStreamTest;
   
     private:
       MultiOutputFileStream(const MultiOutputFileStream& clTemp);
   
       const MultiOutputFileStream& operator=(const MultiOutputFileStream& clTemp);
   
       FileStream* pLocalFileStream{nullptr};
   
       FileSplitMethodEnum eMyFileSplitMethodEnum{SPLIT_NONE};
   
       bool bMyFileSplit{false};
   
       uint32_t uiMyFileCount{0};
   
       double dMyTimeSplitSize{0.0};
   
       double dMyTimeInSeconds{0.0};
   
       double dMyStartTimeInSeconds{0.0};
   
       uint32_t ulMyStartWeek{0UL};
   
       uint32_t ulMyWeek{0UL};
   
       std::u32string s32MyBaseName{U"DefaultBase"};
       std::u32string s32MyExtensionName{U"DefaultExt"};
   
       using WCFstreamMap = std::map<std::u32string, FileStream*>;
       WCFstreamMap wmMyFstreamMap;
   #ifdef WIDE_CHAR_SUPPORT
       bool bEnableWideCharSupport{true};
   #else
       bool bEnableWideCharSupport{false};
   #endif
       std::string stMyBaseName{"DefaultBase"};
       std::string stMyExtensionName{"DefaultExt"};
       using FstreamMap = std::map<std::string, FileStream*>;
       FstreamMap mMyFstreamMap;
       uint64_t ullMyFileSplitSize{0ULL};
       uint64_t ullMyFileSize{0ULL};
   };
   
   #endif
